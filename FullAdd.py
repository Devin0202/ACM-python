# coding: utf-8
import sys
from typing import List

from collections import Counter, deque
from itertools import permutations, combinations
from math import factorial
import heapq


class Solution:
    def __init__(self):
        self.fullAddDict = {
        ('0', '0'):('0', '0'), ('0', '1'):('0', '1'), ('0', '2'):('0', '2'),    ('0', '3'):('0', '3'), ('0', '4'):('0', '4'), ('0', '5'):('0', '5'), ('0', '6'):('0', '6'), ('0', '7'):('0', '7'), ('0', '8'):('0', '8'), ('0', '9'):('0', '9'), ('1', '0'):('0', '1'), ('1', '1'):('0', '2'), ('1', '2'):('0', '3'), ('1', '3'):('0', '4'), ('1', '4'):('0', '5'), ('1', '5'):('0', '6'), ('1', '6'):('0', '7'), ('1', '7'):('0', '8'), ('1', '8'):('0', '9'), ('1', '9'):('1', '0'), ('2', '0'):('0', '2'), ('2', '1'):('0', '3'), ('2', '2'):('0', '4'), ('2', '3'):('0', '5'), ('2', '4'):('0', '6'), ('2', '5'):('0', '7'), ('2', '6'):('0', '8'), ('2', '7'):('0', '9'), ('2', '8'):('1', '0'), ('2', '9'):('1', '1'), ('3', '0'):('0', '3'), ('3', '1'):('0', '4'), ('3', '2'):('0', '5'), ('3', '3'):('0', '6'), ('3', '4'):('0', '7'), ('3', '5'):('0', '8'), ('3', '6'):('0', '9'), ('3', '7'):('1', '0'), ('3', '8'):('1', '1'), ('3', '9'):('1', '2'), ('4', '0'):('0', '4'), ('4', '1'):('0', '5'), ('4', '2'):('0', '6'), ('4', '3'):('0', '7'), ('4', '4'):('0', '8'), ('4', '5'):('0', '9'), ('4', '6'):('1', '0'), ('4', '7'):('1', '1'), ('4', '8'):('1', '2'), ('4', '9'):('1', '3'), ('5', '0'):('0', '5'), ('5', '1'):('0', '6'), ('5', '2'):('0', '7'), ('5', '3'):('0', '8'), ('5', '4'):('0', '9'), ('5', '5'):('1', '0'), ('5', '6'):('1', '1'), ('5', '7'):('1', '2'), ('5', '8'):('1', '3'), ('5', '9'):('1', '4'), ('6', '0'):('0', '6'), ('6', '1'):('0', '7'), ('6', '2'):('0', '8'), ('6', '3'):('0', '9'), ('6', '4'):('1', '0'), ('6', '5'):('1', '1'), ('6', '6'):('1', '2'), ('6', '7'):('1', '3'), ('6', '8'):('1', '4'), ('6', '9'):('1', '5'), ('7', '0'):('0', '7'), ('7', '1'):('0', '8'), ('7', '2'):('0', '9'), ('7', '3'):('1', '0'), ('7', '4'):('1', '1'), ('7', '5'):('1', '2'), ('7', '6'):('1', '3'), ('7', '7'):('1', '4'), ('7', '8'):('1', '5'), ('7', '9'):('1', '6'), ('8', '0'):('0', '8'), ('8', '1'):('0', '9'), ('8', '2'):('1', '0'), ('8', '3'):('1', '1'), ('8', '4'):('1', '2'), ('8', '5'):('1', '3'), ('8', '6'):('1', '4'), ('8', '7'):('1', '5'), ('8', '8'):('1', '6'), ('8', '9'):('1', '7'), ('9', '0'):('0', '9'), ('9', '1'):('1', '0'), ('9', '2'):('1', '1'), ('9', '3'):('1', '2'), ('9', '4'):('1', '3'), ('9', '5'):('1', '4'), ('9', '6'):('1', '5'), ('9', '7'):('1', '6'), ('9', '8'):('1', '7'), ('9', '9'):('1', '8')
        }

    def fullAdd(self, fA: str, fB: str):
        i, j, carry = len(fA) - 1, len(fB) - 1, '0'
        rtv = []
        while 0 <= i or 0 <= j:
            if -1 == i:
                new = self.fullAddDict[(carry, fB[j])]
                rtv.append(new[1])
                carry = new[0]
                j -= 1
            elif -1 == j:
                new = self.fullAddDict[(carry, fA[i])]
                rtv.append(new[1])
                carry = new[0]
                i -= 1
            else:
                tmp = self.fullAddDict[(fA[i], fB[j])]
                new = self.fullAddDict[(carry, tmp[1])]
                rtv.append(new[1])
                carry = self.fullAddDict[(new[0], tmp[0])][1]
                i -= 1
                j -= 1
        if '1' == carry:
            rtv.append(carry)
        else:
            pass
        rtv.reverse()
        return "".join(rtv)

    def multiply(self, num1: str, num2: str) -> str:
        lookup = ['0']
        for i in range(9):
            lookup.append(self.fullAdd(lookup[-1], num1))

        num2 = num2[::-1]
        rtv = '0'
        for i in range(len(num2)):
            new = lookup[int(num2[i])]
            if '0' != new:
                new += '0' * i
            else:
                pass
            rtv = self.fullAdd(rtv, new)
        
        return rtv
        



a = Solution()
b = a.multiply('0', '123')
print(b)
